import React from "react";
import ReactDOM from "react-dom";
import { ErrorMessage } from "@hookform/error-message";
import { useForm } from "react-hook-form";

import "./styles.css";

export default function App() {
  const [nadpisVal, UseStateNappis] = React.useState("Register");
  const [valInputPass, UseStateInputPass] = React.useState();
  const [valInputName, UseStateInputName] = React.useState();
  const nmUsr = "VladikDa@us.com";
  const Pass = "ascdkl4589554";
  const {
    register,
    formState: { errors },
    handleSubmit
  } = useForm({
    criteriaMode: "all"
  });


  const onSubmit = () => {
    console.log(valInputName);
    if(valInputName === nmUsr && valInputPass === Pass){
        UseStateNappis("Registrovan");
        UseStateInputPass("");
        UseStateInputName("");
    }
    else{
      UseStateNappis("Neregistrovan");
      UseStateInputPass("");
      UseStateInputName("");
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <h1>{nadpisVal}</h1>
      <input
        {...register("multipleErrorInput", {
         required: "This input is required.",
          pattern: {
            value: /\d+/,
            message1: "This input is number only."
          },
        })
      }
      onChange ={(e) => UseStateInputPass(e.value)}
      />
       <ErrorMessage
        errors={errors}
        name="multipleErrorInput"
        render={({ messages }) => {
          console.log("messages", messages);
          return messages
            ? Object.entries(messages).map(([type, message1]) => (
                <p key={type}>{message1}</p>
              ))
            : null;
        }}
      />
       <input
        {...register("multipleErrorInput", {
         required: "This input is required.",
          pattern: {
            value: /\d+/,
            message: "This input is number only."
          },
          minLength: {
            value: 11,
            message: "This input must exceed 10 characters"
          }
        })
      }
      onChange ={(e) => UseStateInputName(e.value)}
      />
      <ErrorMessage
        errors={errors}
        name="multipleErrorInput"
        render={({ messages }) => {
          console.log("messages", messages);
          return messages
            ? Object.entries(messages).map(([type, message]) => (
                <p key={type}>{message}</p>
              ))
            : null;
        }}
      />

      <input type="submit" />
    </form>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
