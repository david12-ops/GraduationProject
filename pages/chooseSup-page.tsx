import Head from 'next/head';
import React, { useState } from 'react';

import {
  useMutSuitableSuppMutation,
  useSuppDataQuery,
} from '@/generated/graphql';

import styles from '../styles/Home.module.css';
import stylesF from '../styles/stylesForm/styleForms.module.css';
import { ResSuppCard } from './components/Cards/resSupp';
import { FormChooseSup } from './components/formChooseSupp';
import { Navbar } from './components/navbar2';

const Res = (dataSui: any, allSupp: any) => {
  const SuitableSupps: Array<any> = [];
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const sortedValues = dataSui.map((item: any) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return item;
  });
  console.log(Object.values(sortedValues));
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-return
  sortedValues.forEach((itm: any) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    SuitableSupps.push({
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      dataS: allSupp.data?.suplierData.find((item: any) => {
        return item.supplierId === itm.suppId;
      }),
      cost: itm.cost,
    });
    console.log('sorted val', itm.suppId);
    console.log('supplier', allSupp.data?.suplierData);
  });
  console.log('ssuitabel', SuitableSupps);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  return SuitableSupps ?? [];
};

// eslint-disable-next-line consistent-return
const RenderSupp = (dataFromResover: any, QueryData: any) => {
  // alert(JSON.stringify(Res(dataFromResover, QueryData)));
  if (!QueryData.loading && !QueryData.error && QueryData.data) {
    // eslint-disable-next-line array-callback-return
    return Res(dataFromResover, QueryData).map((itm: any) => (
      <div key={itm.dataS.supplierId}>
        <ResSuppCard
          price={itm.cost}
          delivery={itm.dataS.delivery}
          folie={itm.dataS.foil}
          insurance={itm.dataS.insurance}
          packInBox={itm.dataS.packInBox}
          pickUp={itm.dataS.pickUp}
          sendCash={itm.dataS.sendCashDelivery}
          shippingLabel={itm.dataS.shippingLabel}
          name={itm.dataS.suppName}
        />
      </div>
    ));
  }
  // otazka hledam vhodnÃ½ho a zaroven + pocitam cenu?
};

export default function SuitableSupp() {
  const [dataS, SetData] = useState([]);
  const [width, SetWidth] = useState('');
  const [height, SetHeight] = useState('');
  const [weight, SetWeight] = useState('');
  const [plength, SetLength] = useState('');
  const [placeFrom, SetPlceForm] = useState('');
  const [placeTo, SetPlceTo] = useState('');
  const [cost, SetCost] = useState('');

  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const [suitableSupp] = useMutSuitableSuppMutation();
  const suppData = useSuppDataQuery();

  const HandleForm = async () => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    const result = await suitableSupp({
      variables: {
        Width: Number(width),
        Weight: Number(weight),
        Height: Number(height),
        Length: Number(plength),
        Mz: placeFrom,
        Mdo: placeTo,
        Cost: Number(cost),
      },
    })
      .then((res) => {
        // eslint-disable-next-line promise/always-return
        return res;
      })
      .catch((error: string) => {
        return { err: error };
      });

    if (result.err) {
      alert(result.err);
    }

    if (result.data?.BingoSupPac?.suitable) {
      const data = JSON.parse(result.data?.BingoSupPac?.suitable);
      SetData(data);
    } else {
      // eslint-disable-next-line no-alert
      alert(result.data?.BingoSupPac?.message);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className={styles.main}>
        <FormChooseSup
          onChangeSirka={(e) => SetWidth(e.toString())}
          onChangeVyska={(e) => SetHeight(e.toString())}
          onChangeHmotnost={(e) => SetWeight(e.toString())}
          onChangeDelka={(e) => SetLength(e.toString())}
          onChangeCena={(e) => SetCost(e.toString())}
          // onChangeCityFromWhere={(e) => e}
          // onChangePscFromWhere={(e) => e}
          // onChangeCityWhere={(e) => e}
          // onChangePscWhere={(e) => e}
          // Kontrola!!!
          onChangeDo={(e) => SetPlceTo(e.toString())}
          onChangeZ={(e) => SetPlceForm(e.toString())}
          buttonEl={
            <button className={stylesF.crudbtn} onClick={HandleForm}>
              odeslat
            </button>
          }
        />
        {RenderSupp(dataS, suppData)}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
